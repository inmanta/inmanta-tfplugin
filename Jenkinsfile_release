pipeline {
  agent none
  options {
    disableConcurrentBuilds()
    timestamps()
    timeout(time: 120, unit: 'MINUTES')
  }
  parameters {
    choice(
      name: 'release_type',
      choices: ['dev', 'stable'],
      description: 'Indicate whether a dev or stable release should be built.'
    )
    booleanParam(name: 'do_release', defaultValue: false, description: 'Publish the packet that has been built')
  }
  stages {
    stage('main stage') {
      agent any
      stages {
        stage('Setup') {
          steps {
            script {
              sh '''
              python3 -m venv ${WORKSPACE}/env
              . "${WORKSPACE}"/env/bin/activate
              make install
              '''
            }
          }
        }
        stage("Build dist") {
          steps {
            sh '''
              if [ "${release_type}" == "stable" ]; then
                ${WORKSPACE}/env/bin/python3 setup.py egg_info -Db "" sdist
              else
                ${WORKSPACE}/env/bin/python3 setup.py egg_info -Db ".dev$(date +'%Y%m%d%H%M%S' --utc)" sdist
              fi
            '''
          }
        }
        stage("Publish to devpi") {
          when {
            allOf {
              expression { "${release_type}" == "dev" }
              expression { "${do_release}" == "true" }
            }
          }
          steps {
            withCredentials([
              usernamePassword(
                credentialsId: 'devpi-user',
                passwordVariable: 'DEVPI_PASS',
                usernameVariable: 'DEVPI_USER'
              )
            ]) {
              sh '''
                ${WORKSPACE}/env/bin/pip3 install -U devpi-client
                ${WORKSPACE}/env/bin/devpi use https://artifacts.internal.inmanta.com/inmanta/${release_type}
                ${WORKSPACE}/env/bin/devpi login ${DEVPI_USER} --password=${DEVPI_PASS}
                # upload packages
                ${WORKSPACE}/env/bin/devpi upload dist/*
                ${WORKSPACE}/env/bin/devpi logoff
              '''
            }
          }
        }
        stage("Publish to PyPi") {
          when {
            allOf {
              expression { "${release_type}" == "stable" }
              expression { "${do_release}" == "true" }
            }
          }
          steps {
            withCredentials([
              usernamePassword(
                credentialsId: 'inmantaci_on_pypi',
                passwordVariable: 'TWINE_PASSWORD',
                usernameVariable: 'TWINE_USERNAME'
              ),
              string(credentialsId: 'package_gpg_passphrase', variable: 'PGP_PASS')
            ]) {
              sh '''
                ${WORKSPACE}/env/bin/python3 -m pip install -U twine
                echo "${PGP_PASS}" | gpg --pinentry-mode loopback -u code@inmanta.com --passphrase-fd 0 --detach-sign --batch --yes -a dist/*.tar.gz
                ${WORKSPACE}/env/bin/python3 -m twine upload dist/*.tar.gz{,.asc}
              '''
            }
          }
        }
      }
      post {
        always {
          deleteDir()
        }
      }
    }
  }
}
